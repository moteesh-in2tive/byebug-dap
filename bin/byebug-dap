#!/usr/bin/env ruby

require 'optparse'
require 'byebug/dap'

USAGE = <<-EOS
Usage: byebug-dap [options] <--stdio|--unix dap.socket|--listen 12345> <program>
EOS

def next_arg
  arg = ARGV.pop
  return arg if arg

  LOG.puts USAGE
  exit!
end

options = {}

OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("--stdio", "Listen on STDIN and STDOUT") { |v| options[:stdio] = v }
  opts.on("--listen PORT", "Listen on a TCP port") { |v| options[:listen] = v }
  opts.on("--unix SOCKET", "Listen on a unix socket") { |v| options[:unix] = v }
  opts.on("-w", "--[no-]wait", "Wait for attach or launch command before running program") { |v| options[:wait] = v }
  opts.on("-f", "--[no-]force", "When listening on a unix socket, delete the socket if it exists") { |v| options[:force] = v }
  opts.on("--debug-protocol", "Debug DAP") { |v| Byebug::DAP::Debug.protocol = true if v }
  opts.on("--debug-evaluate", "Debug variable evaluation") { |v| Byebug::DAP::Debug.evaluate = true if v }
  opts.on("--on-start CODE", "Code to print once the debugger is available") { |v| options[:start_code] = v }

  opts.on("--log FD", "Log to the specified file descriptor") { |v| Kernel::LOG = IO.new(v.to_i) }
end.parse!

Kernel::LOG = STDERR.dup unless defined?(Kernel::LOG)

program = next_arg
if program == '-'
  program = next_arg
  options[:stdio] = true
end

if options[:stdio]
  host, port = :stdio, nil

elsif options[:listen]
  host, port = options[:listen].split(':')
  host, port = 'localhost', host unless port

elsif options[:unix]
  host, port = :unix, options[:unix]

  if File.exist?(port)
    if options[:force]
      File.delete(port)
    else
      puts "#{port} already exists"
      exit!
    end
  end

else
  LOG.puts USAGE, "One of --stdio, --listen, or --unix is required"
  exit!
end

begin
  LOG.print "Starting DAP... " unless options[:start_code]

  server = Byebug::DAP::Server.start(host, port)

  LOG.puts options[:start_code] if options[:start_code]

  if options[:wait]
    LOG.print "waiting for debugger... " unless options[:start_code]
    hINT = Signal.trap("INT") { LOG.puts; exit }
    server.wait_for_client
    Signal.trap("INT", hINT)
  end

  LOG.puts "ok" unless options[:start_code]

  require File.realpath(program)

rescue => e
  LOG.puts "#{e.message} (#{e.class.name})", *e.backtrace

ensure
  File.delete(port) if File.exist?(port) if host == :unix
end
